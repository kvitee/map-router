#ifndef MAP_H_INCLUDED_
#define MAP_H_INCLUDED_

#include <stdio.h>
#include <stdint.h>


/* Количество различных символов карты, используемых для ее отрисовки. */
#define MAP_SYMBOLS_COUNT 6


/* Перечисление кодов символов карты. */
typedef enum map_symbol_code {
  /* Свободная ячейка */
  FREE,
  /* Граница карты */
  BORDER,
  /* Препятствие */
  OBSTACLE,
  /* Начало маршрута */
  START,
  /* Конец маршрута */
  END,
  /* Промежуточная точка маршрута */
  ROUTE,
} Map_symbol_code;

/* Карта */
typedef struct map {
  /* Размеры карты (длина и ширина). До 255x255 */
  uint8_t w;
  uint8_t h;

  /* Символы, используемые для отрисовки. */
  char symbols[MAP_SYMBOLS_COUNT];

  /* Разметка карты (что в какой ячейке находится).
   * Хранится как одномерный массив, хотя логическ он все еще двумерный.
   */
  Map_symbol_code *cells;
} Map;


/**
 * Создает карту с размерами w и h и возвращает указатель на нее.
 * По умолчанию, используется следующий набор символов для отрисовки:
 * ' ' - свободная ячейка;
 * '#' - граница карты;
 * '@' - препятствие;
 * 'A' - начало маршрута;
 * 'B' - конец маршрута;
 * '.' - промежуточная точка маршрута.
 */
Map *Map__create(uint8_t w, uint8_t h);

/**
 * Создает новую карту, считав ее данные из файлового потока f,
 * чаще всего - открытого на чтение файла.
 */
Map *Map__read(FILE *f);

/**
 * Возвращает код символа карты по координатам x и y.
 */
Map_symbol_code Map__get(const Map *m, uint8_t x, uint8_t y);

/**
 * Устанавливает код символа карты по координатам x и y на s.
 */
void Map__set(Map *m, uint8_t x, uint8_t y, Map_symbol_code s);

/**
 * Освобождает выделенную под карту память.
 */
void Map__free(Map *m);


#endif  /* MAP_H_INCLUDED_ */
